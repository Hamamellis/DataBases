
CREATE OR REPLACE FUNCTION CONSULTA_PRECO (pCOD_CURSO NUMBER) RETURN NUMBER AS vValor NUMBER;
BEGIN
    SELECT VALOR_CURSO INTO vValor FROM CURSO
        WHERE cod_curso = pcod_curso;
    
    return (vValor);
END;

DECLARE 
    vCod NUMBER := &Codigo;
    vValor NUMBER;
BEGIN
    vValor := Consulta_Preco(vCod);
    dbms_outPut.Put_line('O preço do Curso é: ' || vValor);
END;

select * from CURSO;

-- Criar ou Substituir uma Função chamada 'Existe_Aluno'...
CREATE or REPLACE  FUNCTION Existe_Aluno
-- Com uma variável pCod_Aluno do mesmo Tipo do Campo Cod_Aluno da Tabela ALUNO, que retorna um Boolean em vAluno
(pCod_Aluno IN ALUNO.Cod_Aluno%Type) RETURN BOOLEAN IS vAluno NUMBER(10);

BEGIN
-- Selecione o Código do Aluno e coloque dentro da variável vAluno do Retorno de Boolean (Sim ou Não) - (True or False), 
-- Onde o Código do ALUNO seja igual a variável pCod_Aluno criada na Função Existe_Aluno...
    SELECT Cod_Aluno INTO vAluno FROM ALUNO where Cod_Aluno = pCod_Aluno;
-- Se a resposta vAluno for verdadeira (True)...
    RETURN ( True );
-- Se a resposta vAluno for Falsa (False)...
    EXCEPTION
        WHEN others THEN
            RETURN ( False );    
END;

-- vamos ver os dados da Tabela ALUNO;
Select * from ALUNO;

DECLARE
    vCodigo INTEGER := 2;
BEGIN
    If Existe_Aluno(vCodigo) THEN
        dbms_output.put_line('Código encontrado com Sucesso!');
        ELSE
            dbms_output.put_line('Código encontrado com Sucesso!');
    END If;
END;

select * from table(dbms_xplan.display_cursor(sql_id=>'9cw9vhv3zqrwq', format=>'ALLSTATS LAST'));


Select * from Aluno ORDER BY cod_aluno;

Alter TABLE ALUNO DROP column Nascimento;

ALTER TABLE ALUNO ADD Nascimento DATE;

UPDATE ALUNO SET NASCIMENTO = '21/09/1998'
WHERE cod_aluno = 35;

UPDATE ALUNO SET NASCIMENTO = '21/09/1972'
WHERE cod_aluno = 36;

UPDATE ALUNO SET NASCIMENTO = '13/03/1981'
WHERE cod_aluno = 69;

UPDATE ALUNO SET NASCIMENTO = '29/02/2000'
WHERE cod_aluno = 71;



select nome, salario from aluno;
select * from aluno;

ALTER TABLE ALUNO ADD SALARIO NUMBER(8,2);

UPDATE ALUNO SET SALARIO = 4500.11 WHERE cod_aluno = 32;
UPDATE ALUNO SET SALARIO = 15555.55 WHERE cod_aluno = 12;
UPDATE ALUNO SET SALARIO = 7500.22 WHERE cod_aluno = 4;
UPDATE ALUNO SET SALARIO = 9800.33 WHERE cod_aluno = 6;
UPDATE ALUNO SET SALARIO = 11500.44 WHERE cod_aluno = 8;
UPDATE ALUNO SET SALARIO = 13800.55 WHERE cod_aluno = 10;
UPDATE ALUNO SET SALARIO = 17500.66 WHERE cod_aluno = 12;


-- FAÇA UMA QUERY QUE MOSTRE APENAS O NOME E O SALARIO ENTRE 7000 E 10000 DO ALUNO QUE SEJA DE 'RS' E 'SP' QUE MORA EM GRAMADOS...
SELECT NOME, SALARIO FROM ALUNO
WHERE ESTADO IN ('RS', 'SP') AND SALARIO BETWEEN 7000 AND 10000 AND CIDADE = 'GRAMADOS';

SELECT * FROM ALUNO
WHERE ESTADO IN ('RS', 'SP') AND SALARIO BETWEEN 7000 AND 10000 AND CIDADE = 'GRAMADOS';

select * from CONTRATO;

SELECT CON.DATA, ALU.NOME, TOTAL
FROM CONTRATO CON, ALUNO ALU WHERE CON.COD_ALUNO = ALU.COD_ALUNO AND CON.COD_CONTRATO = 32;


SELECT COUNT(*) FROM CURSO WHERE VALOR < 50000;

SELECT COUNT(*) FROM CURSO WHERE VALOR BETWEEN 1000 AND 15000;

SELECT
COUNT(CASE WHEN VALOR < 10000 THEN 1 ELSE null END) baixo,
COUNT(CASE WHEN VALOR BETWEEN 1000 AND 15000 THEN 1 ELSE null END) medio,
COUNT(CASE WHEN VALOR > 15000 THEN 1 ELSE null END) alto
FROM CURSO;

--- USANDO CLAUSULA HAVING --

SELECT COD_ALUNO, AVG(TOTAL)FROM CONTRATO GROUP BY COD_ALUNO
HAVING COD_ALUNO IN (1, 2);

--------------------------------------------------------------------------------------------------
    
DECLARE 
    HORA VARCHAR2(2);
    H NUMBER;
BEGIN
     -- QUEREMOS A APARENCIA EM DOIS DÍGITOS 24 HORAS... FAZENDO UM CAST PARA NUMERO
    H := TO_NUMBER(TO_CHAR(SYSDATE, 'HH24'));
    -- VAMOS REALIZAR A IMPRESSÃO NA TELA...
    Dbms_OutPut.Put_line( H || ' ' || TO_CHAR(SYSDATE, 'DAY'));
END;


    BEGIN
        IF (TO_CHAR(SYSDATE, 'DAY') IN ('SABADO','DOMINGO') 
        OR TO_NUMBER(TO_CHAR(SYSDATE, 'HH24'))
            NOT BETWEEN 8 AND 18) THEN
                RAISE_APPLICATION_ERROR(-20001,'FORA DO HORARIO COMERCIAL');            
        END IF;
    END;


-----------------------------------------------------------------------------------
-- CRIAÇÃO DE TRIGGER --

CREATE OR REPLACE TRIGGER Valida_Horario_Curso
BEFORE INSERT OR UPDATE OR DELETE ON Contrato
    BEGIN
        IF (TO_CHAR(SYSDATE, 'D') IN ('1','7') 
        OR TO_NUMBER(TO_CHAR(SYSDATE, 'HH24'))
            NOT BETWEEN 8 AND 23) THEN
                RAISE_APPLICATION_ERROR(-20001,'FORA DO HORARIO COMERCIAL');            
        END IF;
    END;

DROP TRIGGER Valida_Horario_Curso;
    
SELECT * FROM CONTRATO ORDER BY COD_CONTRATO;

--AO INSERIR ALGO NO BANCO DE DADOS COM A TRIGGER ATIVA...
INSERT INTO CONTRATO VALUES(SEQ_CONTRATO.nextval, SYSDATE + 3, SEQ_ALUNO.nextval, 3985.78, 35);

-- ORA-20001: FORA DO HORARIO COMERCIAL
-- ORA-06512: em "WAGNERBARROS.VALIDA_HORARIO_CURSO", line 5
-- ORA-04088: erro durante a execução do gatilho 'WAGNERBARROS.VALIDA_HORARIO_CURSO


CREATE TABLE CHANGE_LOG
(
    ID_LOG INTEGER,
    USUARIO VARCHAR2 (100),
    HORARIO DATE,
    VALOR_ANTERIOR NUMBER(8,2),
    VALOR_ATUAL NUMBER(8,2),
    DIFERENCA NUMBER(8,2),
    PERCENTUAL NUMBER(5,2)
);

DROP TABLE LOG;

CREATE SEQUENCE SEQ_ID_LOG START WITH 1;

-- QUANDO HOUVER ALTERAÇÕES NA COLUNA TOTAL DA TABELA CONTRATO, VAI ACIONAR OU DISPARA A TRIGGER...
CREATE OR REPLACE TRIGGER Trigger_Gera_Log
AFTER UPDATE OF TOTAL ON CONTRATO
    DECLARE
       -- VARIAVEL
    BEGIN
         INSERT INTO CHANGE_LOG (ID_LOG, USUARIO, HORARIO) VALUES (SEQ_ID_LOG.nextval, USER, SYSDATE);
    END;
    
UPDATE CONTRATO SET TOTAL = 4985.44 WHERE COD_CONTRATO = 8;

SELECT * FROM CHANGE_LOG;

CREATE OR REPLACE TRIGGER VALIDAR_HORARIO
    BEFORE INSERT  OR UPDATE OR DELETE ON CONTRATO
BEGIN
    IF(TO_CHAR(SYSDATE, 'D') IN (1, 7) OR TO_NUMBER(TO_CHAR(SYSDATE, 'HH24')) NOT BETWEEN 8 AND 23) THEN
            IF( INSERTING ) THEN
                RAISE_APPLICATION_ERROR(-20001,'FORA DO HORARIO COMERCIAL - NÃO PODE INSERIR...');
            ELSIF ( DELETING ) THEN
                RAISE_APPLICATION_ERROR(-20002,'FORA DO HORARIO COMERCIAL - NÃO PODE REMOVER...');
            ELSIF ( UPDATING ('TOTAL')) THEN
                RAISE_APPLICATION_ERROR(-20003,'FORA DO HORARIO COMERCIAL - NÃO PODE ALTERAR A COLUNA TOTAL...');
            ELSE 
                RAISE_APPLICATION_ERROR(-20004,'FORA DO HORARIO COMERCIAL - NÃO PODE ALTERAR...');
        END IF;
    END IF;
END;

ALTER TRIGGER VALIDAR_HORARIO DISABLE;
ALTER TRIGGER VALIDAR_HORARIO ENABLE;
ALTER TRIGGER Valida_Horario_Curso DISABLE;
ALTER TRIGGER Valida_Horario_Curso ENABLE;

SELECT * FROM CONTRATO;

-- NÃO COSEGUIREMOS REALIZAR AS AÇÕES ABAIXO NA TABELA CONTRATO, ENQUANTO A TRIGGER VALIDAR_HORARIO ESTIVER HABILITADA...
DELETE FROM CONTRATO;
UPDATE CONTRATO SET TOTAL = 6500.15 WHERE COD_CONTRATO = 80;
INSERT INTO CONTRATO VALUES(SEQ_CONTRATO.NEXTVAL, SYSDATE, SEQ_ALUNO.NEXTVAL, 7834.43, 38);

-- CRIAÇÕES DE FUNCTION -- TODA FUNCTION TEM RETORNO --

-- 
CREATE OR REPLACE FUNCTION Consulta_Preco (pCod_Curso NUMBER) -- Criamos uma função chamada que tem um pCOD_CURSO TIPO NUMBER...
RETURN NUMBER as vValor NUMBER; -- RETORNE UM NÚMERO COMO VARIÁVEL TIPO NÚMERO...
BEGIN
    SELECT valor INTO vValor FROM CURSO -- SELECIONE O CAMPO VALOR E INSIRA DENTRO DA VARIÁVEL DA TABELA CURSO...
        WHERE COD_CURSO = PCOD_CURSO; -- COMPARAMOS OS CÓDIGOS...
    RETURN(vVALOR);
END;

SELECT * FROM CURSO;

-- VAMOS USAR A FUNÇÃO --
DECLARE 
    vCod NUMBER := &Codigo;
    vValor NUMBER;
BEGIN
    vValor := Consulta_Preco (vCod);
    Dbms_OutPut.Put_Line('Preço do Curso: ' || vValor);
END;

CREATE OR REPLACE FUNCTION Existe_Aluno (pCod_Aluno IN ALUNO.Cod_Aluno%TYPE)
    RETURN BOOLEAN
    IS  
        vAluno NUMBER(10);
    BEGIN
        SELECT COD_ALUNO INTO vAluno FROM ALUNO
            WHERE COD_ALUNO = pcod_aluno;
            return (true);
        EXCEPTION
            WHEN others THEN
                RETURN (false);
    END;
    
DECLARE
        vCodigo INTEGER := 1;
  BEGIN
        IF Existe_aluno(vCodigo) THEN
           Dbms_Output.Put_Line('Codigo encontrado com Sucesso!!!');
        ELSE
           Dbms_Output.Put_Line('O Codigo informado não Existe!!!');         
        END IF;
  END;
  
CREATE OR REPLACE PROCEDURE Cadastra_Aluno
    (
       pCOD_ALUNO    IN ALUNO.cod_Aluno%TYPE,
       pNOME         IN ALUNO.Nome%TYPE,
       pCIDADE       IN ALUNO.Cidade%TYPE,
       pCEP          IN ALUNO.Cep%TYPE,
       pESTADO       IN ALUNO.Estado%TYPE,
       pSALARIO      IN ALUNO.Salario%TYPE
    )
IS
    BEGIN
        IF ( NOT Existe_Aluno (pCod_Aluno)) THEN
            INSERT INTO ALUNO (COD_ALUNO, NOME, CIDADE, CEP, ESTADO, SALARIO)
            VALUES (PCOD_ALUNO, PNOME, PCIDADE, PCEP, PESTADO, PSALARIO);
        ELSE 
            Dbms_Output.Put_Line('O Aluno ja Existe!!!');    
        END IF;
    END;
        
DECLARE
    --VARIÁVEL SE HOUVER NECESSIDADE
BEGIN
    Cadastra_Aluno(SEQ_ALUNO.nextval, 'SUASSUNNA KERLISON', 'RIO DE JANEIRO', '93860000', 'RJ', 7000);
    Dbms_Output.Put_Line('O Aluno foi cadastrado com Sucesso!!!');   
END;

DELETE  FROM ALUNO WHERE COD_ALUNO = 32;

INSERT INTO ALUNO (COD_ALUNO, NOME, CIDADE, CEP, ESTADO, SALARIO)
            VALUES (SEQ_ALUNO.nextval, 'DANIEL SIQUEIRA', 'SALVADOR', '72350000', 'BA', 8945.17);
            
            UPDATE ALUNO SET SALARIO = 8995.45 WHERE COD_ALUNO = 38;
            UPDATE ALUNO SET SALARIO = 4769.43 WHERE COD_ALUNO = 42;

SELECT * FROM ALUNO ORDER BY COD_ALUNO;

-- BLOCO ANONIMO --
DECLARE 
    VDESCONTO NUMBER(6,2) := 0.50;
    vcidade VARCHAR2(50)  := 'BRASILIA';
    vcod_aluno ALUNO.COD_ALUNO%TYPE := 8;
     VTOTAL NUMBER(8,2) := 3445.25;
    BEGIN
       VTOTAL := ROUND(VTOTAL * VDESCONTO, 2);
       Dbms_Output.Put_Line('TOTAL ' || VTOTAL);
       VDESCONTO := 1.20;
       VCIDADE := INITCAP(VCIDADE);
       Dbms_Output.Put_Line('CIDADE: ' || vcidade);
       Dbms_Output.Put_Line('DESCONTO: ' || VDESCONTO);
       Dbms_Output.Put_Line('ALUNO: ' || vcod_aluno);
    END;
    
    
DECLARE
    preco_1 number(8,2):= 43;
    preco_2 number(8,2):= 33;
    vflag BOOLEAN; -- VARIÁVEL QUE RECEBE -- SIM OU NÃO
BEGIN
    VFLAG := (preco_1 > preco_2); --PERGUNTA INTRÍNSECA (QUAL É MAIOR?)
        IF (VFLAG = TRUE) THEN
            Dbms_Output.Put_Line('Verdadeiro');
        ELSE
            Dbms_Output.Put_Line('Falso');
        END IF;
            IF (preco_2 > preco_1) THEN
                Dbms_Output.Put_Line('VERDADEIRO');
            ELSE
                Dbms_Output.Put_Line('FALSO');
            END IF;
END;

-- BIND VARIABLE --

VARIABLE vDesconto_bind NUMBER

DECLARE
    VCOD_ALUNO NUMBER := 4;
BEGIN
    :vDesconto_bind := 0.85;
    Dbms_OutPut.Put_Line(' Desconto por Bind Variable :' || :vDesconto_bind);
    
UPDATE CONTRATO SET TOTAL = TOTAL * :vDesconto_bind WHERE COD_ALUNO = VCOD_ALUNO;
END;

-- 5525,13 COD_ALUNO... 4696,36 COD_ALUNO...


--- EXEMPLO DE BLOCO INTERNO E EXTERNO --

DECLARE
    VAR_TESTE VARCHAR(10) := 'ABOLICAO';
BEGIN
        -- O BLOCO INTERNO ENXERGA O BLOCO EXTERNO...
        DECLARE
                VAR_TESTE VARCHAR(10) := 'CARCERE';        
            BEGIN
                DBMS_OUTPUT.PUT_LINE('BLOCO INTERNO: ' || VAR_TESTE);
        END;
     -- O BLOCO EXTERNO( PRINCIPAL ) NÃO ENXERGA BLOCO INTERNO...
    DBMS_OUTPUT.PUT_LINE('BLOCO EXTERNO: ' || VAR_TESTE);
    
END;

-- CURSORES REPRESENTAM OS CAMPOS DE UMA TABELA -- CURSOR(NOME) IS(DADOS DA TABELA)...
-- BLOCO ANONIMO --
DECLARE
-- DECLARAÇÕES DAS VARIÁVEIS -- QUE RECEBE O TIPO DE DADOS DA TABELA ALUNO...
    VCOD_ALUNO ALUNO.COD_ALUNO%TYPE;
    VNOME ALUNO.NOME%TYPE;
-- INSTANCIA DO CURSOR QUE RECEBE A QUERY DA TABELA...
        CURSOR cur IS
            SELECT COD_ALUNO, NOME FROM ALUNO;
BEGIN
-- ABRIREMOS O CURSOR...
    OPEN cur;
-- FAREMOS UM LOOP EM CADA LINHA...
        LOOP
            FETCH cur INTO VCOD_ALUNO, VNOME;
-- CONDIÇÕES PARA ENCERRAR O LOOP -- ( QUANDO A QUANTIDADE FOR MAIOR QUE 10 OU NÃO ENCONTRADO)
                EXIT WHEN cur%ROWCOUNT > 10 OR cur%NOTFOUND;
-- IMPRESSÃO NA TELA O NO CONSOLE...
    DBMS_OUTPUT.PUT_LINE('O CODIGO: ' || LPAD(VCOD_ALUNO, 4, 0) || ' - ' || 'O NOME: ' || VNOME);
-- FECHAMOS O LOOP...
    END LOOP;    
--FECHAREMOS O CURSOR...
    CLOSE cur;
END;

-- CRIANDO VISÕES DAS TABELAS --
CREATE OR REPLACE VIEW VIEW_ALUNO
AS 
SELECT COD_ALUNO AS CODIGO,  NOME, SALARIO, ESTADO
FROM ALUNO
WHERE ESTADO = 'RS';

SELECT * FROM VIEW_ALUNO;
SELECT * FROM CONTRATO;

-- CRIAÇÃO DE UMA VIEW COMPLEXA
-- QUANDO O CAMPO NÃO TEM FUNÇÃO DE GRUPO DEVE-SE,
-- DECLARAR NA CLAUSURA GROUP BY (TRUNC(DATA_CONTRATO)
CREATE OR REPLACE VIEW VIEW_CONTRATO
AS
    SELECT
        COD_ALUNO AS CODIGO,
        TRUNC(DATA) AS DATA, 
        MAX(DESCONTO) "DESCONTO MAXIMO", 
        MIN(DESCONTO) "DESCONTO MINIMO", 
        SUM(TOTAL) "TOTAL DO CONTRATO",
        COUNT(*) "QUANTIDADE DE CONTRATO"
        FROM CONTRATO 
    GROUP BY COD_ALUNO, TRUNC(DATA);

SELECT * FROM CONTRATO;
SELECT * FROM VIEW_CONTRATO ORDER BY codigo;

SELECT * FROM PESSOA;

CREATE SEQUENCE SEQ_PESSOA START WITH 1
INCREMENT BY 2;

CREATE SEQUENCE SEQ_RUA START WITH 1
INCREMENT BY 2;

CREATE SEQUENCE SEQ_BAIRRO START WITH 1
INCREMENT BY 2;

CREATE SEQUENCE SEQ_CIDADE START WITH 1
INCREMENT BY 2;

INSERT INTO PESSOA VALUES(SEQ_PESSOA.nextval, 'CONSUMIDOR', 'WAGNER DE ALMEIDA NUNES', 'FISICA', 17, '55588816690');
INSERT INTO PESSOA VALUES(SEQ_PESSOA.nextval, 'FORNECEDOR', 'AUTO PEÇAS JUNQUEIRAS LTDA', 'JURIDICA', 19, '14577516690');
INSERT INTO PESSOA VALUES(SEQ_PESSOA.nextval, 'FORNECEDOR', 'BORRACHARIA ALCANTARA ME', 'JURIDICA', 21, '89847510000');
INSERT INTO PESSOA VALUES(SEQ_PESSOA.nextval, 'CONSUMIDOR', 'AMÉLIA BICUDOS DE MELLO', 'FISICA', 23, '25257519990');
INSERT INTO PESSOA VALUES(SEQ_PESSOA.nextval, 'FORNECEDOR', 'VIDRAÇARIA DOIS IRMÃOS ME', 'JURIDICA', 25, '65997500090');
INSERT INTO PESSOA VALUES(SEQ_PESSOA.nextval, 'CONSUMIDOR', 'MARCOS PONTES DE OLIVEIRA', 'FISICA', 27, '55588588890');
INSERT INTO PESSOA VALUES(SEQ_PESSOA.nextval, 'CONSUMIDOR', 'ANDRÉ SOMANTES LIBERATO', 'FISICA', 29, '98747500000');

ALTER TABLE PESSOA DROP CONSTRAINT CK_PESSOA_TIPO;

-- DROP VIEW VIEW_PESSOA;

INSERT INTO CIDADE VALUES(SEQ_cidade.nextval, 'BOTÕES VERMELHOS');
INSERT INTO BAIRRO VALUES(SEQ_BAIRRO.nextval,'CIDADE DOS PRAZERES LEGAIS', 7);
INSERT INTO RUA VALUES(SEQ_RUA.nextval, 'AVENIDA DAS CAPIRAVAS, 386', 3, 1);
INSERT INTO RUA VALUES(SEQ_RUA.nextval, 'AVENIDA DOS LEOPARDOS, 583', 7, 7);

UPDATE BAIRRO SET NOME = 'AMERICANA' WHERE COD_BAIRRO = 7;

SELECT * FROM RUA ORDER BY COD_RUA;
SELECT * FROM BAIRRO;
SELECT * FROM CIDADE;
SELECT * FROM PESSOA;
SELECT * FROM CONTRATO RUA ORDER BY COD_CONTRATO;

CREATE OR REPLACE VIEW VIEW_PESSOA_FORNECEDOR
AS
SELECT COD_PESSOA PESSOA, TIPO, NOME, COD_RUA AS LOGRADOURO
FROM PESSOA WHERE TIPO ='CONSUMIDOR';

SELECT * FROM VIEW_PESSOA_FORNECEDOR ORDER BY PESSOA;

SELECT PES.PESSOA AS CODIGO,
    PES.NOME AS PESSOA,
    CID.NOME AS CIDADE,
    RUA.NOME AS RUA
FROM VIEW_PESSOA_FORNECEDOR PES, RUA RUA, CIDADE CID
    WHERE PES.LOGRADOURO = RUA.COD_RUA
        AND CID.COD_CIDADE = RUA.COD_CIDADE
ORDER BY PES.NOME;

-- O BLOCO ANONIMO POSSUI UMA VARIÁVEL VCOD QUE RECEBERA OS MESMO TIPO DA TABELA ORIGINAL...
DECLARE
    vCod CONTRATO.COD_CONTRATO%TYPE;
BEGIN --SELECIONAMOD A PROXIMA SEQUENCIA E INSERIMOS NA VARIÁVEL...
    SELECT SEQ_CONTRATO.NEXTVAL INTO VCOD FROM DUAL;
    
    --FAREMOS A INSERÇÃO DOS VALORES...
    INSERT INTO CONTRATO(COD_CONTRATO, DATA, COD_ALUNO, TOTAL, DESCONTO)
    VALUES(VCOD, SYSDATE, SEQ_ALUNO.NEXTVAL, 18970.33, 49);
    
    DBMS_OUTPUT.PUT_LINE('CONTRATO CRIADO COM SUCESSO" ' || VCOD);
END;

-- ATUALIZAMOS UM DADOS DA FORMA TRADICIONAL...
UPDATE CONTRATO SET TOTAL = 23853.25 WHERE COD_CONTRATO = 224;


-- ABAIXO VAMOS ATUALIZAR PELO COD_CONTRATO COM TELA DE SOLICITAÇÃO -- MAIS PROFISSIONAL...
DECLARE
    vCod CONTRATO.COD_CONTRATO%TYPE := &CODIGO;
BEGIN    
    UPDATE CONTRATO SET 
    TOTAL = &VALOR WHERE COD_CONTRATO = vCod;
    
    DBMS_OUTPUT.PUT_LINE('ALTERADO COM SUCESSO" ' || VCOD);
END;

-- ABAIXO VAMOS ATUALIZAR PELO DESCONTO COM TELA DE SOLICITAÇÃO -- MAIS PROFISSIONAL...

DECLARE
    vCod CONTRATO.COD_CONTRATO%TYPE := &CODIGO;
BEGIN    
    UPDATE CONTRATO SET 
    DESCONTO = &DESC WHERE COD_CONTRATO = vCod;
    
    DBMS_OUTPUT.PUT_LINE('ALTERADO COM SUCESSO " ' || VCOD);
END;

-- ABAIXO VAMOS DELETAR PELO COD_CONTRATO COM TELA DE SOLICITAÇÃO -- MAIS PROFISSIONAL...

DECLARE
    vContrato CONTRATO.COD_CONTRATO%TYPE := &CONTRATO;
BEGIN    
    DELETE FROM CONTRATO 
    WHERE COD_CONTRATO = vContrato;
    
    DBMS_OUTPUT.PUT_LINE('REGISTRO DELETADO COM SUCESSO" ' || vContrato);
END;

-- ABAIXO VAMOS ATUALIZAMOS PELO COD_CONTRATO COM TELA DE SOLICITAÇÃO -- APRESENTAMOS A CONTAGEM DE ATUALIZAÇÕES...
DECLARE
    vContrato CONTRATO.COD_CONTRATO%TYPE := &CONTRATO;
    vResposta VARCHAR2(100);
BEGIN    
    UPDATE CONTRATO SET
    DESCONTO = &DESCONTO
    WHERE COD_CONTRATO = vContrato;
    
-- APRESENTAMOS A CONTAGEM DE ATUALIZAÇÕES...
    vResposta := SQL%ROWCOUNT;
    
    DBMS_OUTPUT.PUT_LINE('REGISTRO DELETADO COM SUCESSO" ' || vResposta);
END;

-- FAÇA UMA QUERY ONDE, APRESENTE A DATA DO CONTRATO DA TABELA CONTRATO, O NOME DO ALUNO DA TABELA ALUNO
-- E O TOTAL DA TABELA CONTRATO... NESTA ORDEM;
-- DA TABELA CONTRATO CHAMADO CON E DA TABELA ALUNO CHAMADA ALU...
-- ONDE O CODIGO DO ALUNO DA TABELA CONTRATO, SEJA IGUAL AO CODIGO DO ALUNO DA TABELA ALUNO... (FK = PK)
-- E O CODIGO DO CONTRATO SEJA IGUAL A 96

SELECT CON.DATA, ALU.NOME, CON.TOTAL
FROM CONTRATO CON, ALUNO ALU
WHERE CON.COD_ALUNO = ALU.COD_ALUNO
AND CON.COD_CONTRATO = 96;


-- FAÇA UMA QUERY QUE APRESENTE A DATA E O CODIGO DO CONTRATO DA TABELA CONTRATO,
-- O CODIGO E O NOME DO ALUNO DA TBELA ALUNO E O TOTAL DA TABELA CONTRATO CHAMADO DE VALOR TOTAL;
-- DA TABELA CONTRATO CHAMADO CON E DA TABELA ALUNO CHAMADA ALU...
-- ONDE O CODIGO DO ALUNO DA TABELA CONTRATO, SEJA IGUAL AO CODIGO DO ALUNO DA TABELA ALUNO... (FK = PK);

SELECT CON.DATA, CON.COD_CONTRATO, ALU.COD_ALUNO, ALU.NOME, CON.TOTAL AS "VALOR TOTAL"
FROM CONTRATO CON, ALUNO ALU
WHERE CON.COD_ALUNO = ALU.COD_ALUNO;

SELECT COD_ALUNO, AVG(TOTAL) FROM CONTRATO
GROUP BY COD_ALUNO
HAVING COD_ALUNO IN (1, 2);

SELECT COD_ALUNO, AVG(TOTAL) FROM CONTRATO
WHERE COD_ALUNO IN (1, 2)
GROUP BY COD_ALUNO;

SELECT * FROM CONTRATO ORDER BY COD_CONTRATO;
SELECT * FROM ALUNO ORDER BY COD_ALUNO;
SELECT * FROM ITEM ORDER BY COD_ITEM;
SELECT * FROM CURSO ORDER BY COD_CURSO;

INSERT INTO ITEM(COD_ITEM, COD_CURSO, COD_CONTRATO, VALOR) VALUES (SEQ_ITEM.NEXTVAL, 4, 8, 1200.48);
INSERT INTO ITEM(COD_ITEM, COD_CURSO, COD_CONTRATO, VALOR) VALUES (SEQ_ITEM.NEXTVAL, 8, 16, 3400.81);
INSERT INTO ITEM(COD_ITEM, COD_CURSO, COD_CONTRATO, VALOR) VALUES (SEQ_ITEM.NEXTVAL, 16, 24, 1624.16);
INSERT INTO ITEM(COD_ITEM, COD_CURSO, COD_CONTRATO, VALOR) VALUES (SEQ_ITEM.NEXTVAL, 4, 32, 1800.15);
INSERT INTO ITEM(COD_ITEM, COD_CURSO, COD_CONTRATO, VALOR) VALUES (SEQ_ITEM.NEXTVAL, 8, 40, 1900.78);
INSERT INTO ITEM(COD_ITEM, COD_CURSO, COD_CONTRATO, VALOR) VALUES (SEQ_ITEM.NEXTVAL, 16, 48, 1810.98);
INSERT INTO ITEM(COD_ITEM, COD_CURSO, COD_CONTRATO, VALOR) VALUES (SEQ_ITEM.NEXTVAL, 4, 56, 1510.43);
INSERT INTO ITEM(COD_ITEM, COD_CURSO, COD_CONTRATO, VALOR) VALUES (SEQ_ITEM.NEXTVAL, 8, 80, 1730.48);
INSERT INTO ITEM(COD_ITEM, COD_CURSO, COD_CONTRATO, VALOR) VALUES (SEQ_ITEM.NEXTVAL, 16, 88, 1950.51);
INSERT INTO ITEM(COD_ITEM, COD_CURSO, COD_CONTRATO, VALOR) VALUES (SEQ_ITEM.NEXTVAL, 4, 96, 2530.78);
INSERT INTO ITEM(COD_ITEM, COD_CURSO, COD_CONTRATO, VALOR) VALUES (SEQ_ITEM.NEXTVAL, 8, 168, 3521.13);
INSERT INTO ITEM(COD_ITEM, COD_CURSO, COD_CONTRATO, VALOR) VALUES (SEQ_ITEM.NEXTVAL, 16, 176, 4109.48);
INSERT INTO ITEM(COD_ITEM, COD_CURSO, COD_CONTRATO, VALOR) VALUES (SEQ_ITEM.NEXTVAL, 4, 184, 5110.66);
INSERT INTO ITEM(COD_ITEM, COD_CURSO, COD_CONTRATO, VALOR) VALUES (SEQ_ITEM.NEXTVAL, 8, 192, 3100.78);
INSERT INTO ITEM(COD_ITEM, COD_CURSO, COD_CONTRATO, VALOR) VALUES (SEQ_ITEM.NEXTVAL, 16, 200, 4100.48);

-- USANDO UNION -- VAI MESCLAR E REPETIR AS TABELAS UNIDAS --

SELECT COD_ALUNO, NOME, CIDADE FROM ALUNO
WHERE ESTADO = 'SC'
UNION
SELECT COD_ALUNO, NOME, CIDADE FROM ALUNO
WHERE COD_ALUNO = 1;

-- USANDO UNION ALL --

SELECT COD_ALUNO, NOME, CIDADE FROM ALUNO
WHERE ESTADO = 'RS'
UNION ALL
SELECT COD_ALUNO, NOME, CIDADE FROM ALUNO
WHERE COD_ALUNO = 1;

-- EXEMPLO USANDO A CLAUSURA 'IN' --
SELECT COD_CURSO, NOME FROM CURSO
    WHERE COD_CURSO IN
    (
        SELECT COD_CURSO FROM ITEM
    );

-- PARA CONSULTAR OS ITENS IGUAIS EM DUAS TABELAS --
SELECT COD_CURSO, NOME FROM CURSO Cur
WHERE EXISTS
    (
        SELECT &CODIGO_ITEM 
            FROM ITEM IT 
        WHERE IT.COD_CURSO = cur.COD_CURSO
    );

-- PARA CONSULTAR OS ITENS QUE NÃO REPETEM EM DUAS TABELAS --
SELECT COD_CURSO, NOME FROM CURSO Cur
WHERE NOT EXISTS
    (
        SELECT &CODIGO_ITEM 
            FROM ITEM IT 
        WHERE IT.COD_CURSO = cur.COD_CURSO
    );

SELECT DISTINCT IT.COD_CURSO "CODIGO", CUR.NOME "NOME" 
    FROM CURSO CUR, ITEM IT
WHERE IT.COD_CURSO = CUR.COD_CURSO;

-- PARA CONSULTAR OS ITENS QUE NÃO REPETEM EM DUAS TABELAS --
SELECT COD_CURSO "CODIGO", NOME "NOME" FROM CURSO CUR
WHERE EXISTS
    (
        SELECT &CODIGO_ITEM 
            FROM ITEM IT 
        WHERE IT.COD_CURSO = cur.COD_CURSO
    );
    
    
    
-- Estatísticas - Scripts --
--Analisa apenas uma tabela - executar como usuário normal ANALYZE TABLE TALUNO COMPUTE STATISTICS;
--Estatística de schema - SYSTEM EXEC DBMS_UTILITY.ANALYZE_SCHEMA('CURSO','COMPUTE');
--Estatística de banco inteiro (Pode ser demorado) - SYSTEM EXEC DBMS_STATS.GATHER_DATABASE_STATS;

-- USUÁRIO NORMAL --
ANALYZE TABLE ALUNO COMPUTE STATISTICS;

--USUÁRIO SYSTEM --
EXEC DBMS_UTILITY.ANALYZE_SCHEMA('WAGNERBARROS','COMPUTE');

--USUÁRIO SYSTEM --
EXEC DBMS_STATS.GATHER_DATABASE_STATS;

--Bloco anonimo para ler estatísticas do banco de dados - --USUÁRIO SYSTEM --     

DECLARE
  libcac NUMBER(10, 2);
  rowcac NUMBER(10, 2);
  bufcac NUMBER(10, 2);
  redlog NUMBER(10, 2);
  spsize NUMBER;
  blkbuf NUMBER;
  logbuf NUMBER;
BEGIN
  SELECT VALUE
  INTO redlog
  FROM v$sysstat
  WHERE name = 'redo log space requests';
SELECT 100 * (SUM(pins) - SUM(reloads)) / SUM(pins)
  INTO libcac
  FROM v$librarycache;
 
  SELECT 100 * (SUM(gets) - SUM(getmisses)) / SUM(gets)
  INTO rowcac
  FROM v$rowcache;
SELECT 100 * (cur.VALUE + con.VALUE - phys.VALUE) /(cur.VALUE + con.VALUE)
  INTO bufcac
  FROM v$sysstat cur, v$sysstat con, v$sysstat phys, 
  v$statname ncu, v$statname nco, v$statname nph
  WHERE cur.statistic# = ncu.statistic#
  AND ncu.name = 'db block gets'
  AND con.statistic# = nco.statistic#
  AND nco.name = 'consistent gets'
  AND phys.statistic# = nph.statistic#
  AND nph.name = 'physical reads';
  SELECT VALUE INTO spsize
  FROM v$parameter
  WHERE name = 'shared_pool_size';
  SELECT VALUE INTO blkbuf
  FROM v$parameter
  WHERE name = 'db_block_buffers';
  SELECT VALUE INTO logbuf FROM v$parameter WHERE name = 'log_buffer';
  DBMS_OUTPUT.put_line('> SGA CACHE STATISTICS');
  DBMS_OUTPUT.put_line('> ********************');
  DBMS_OUTPUT.put_line('> SQL Cache Hit rate = ' || libcac);
  DBMS_OUTPUT.put_line('> Dict Cache Hit rate = ' || rowcac);
  DBMS_OUTPUT.put_line('> Buffer Cache Hit rate = ' || bufcac);
  DBMS_OUTPUT.put_line('> Redo Log space requests = ' || redlog);
  DBMS_OUTPUT.put_line('> ');
  DBMS_OUTPUT.put_line('> INIT.ORA SETTING');
  DBMS_OUTPUT.put_line('> ****************');
  DBMS_OUTPUT.put_line('> Shared Pool Size = ' || spsize || ' Bytes');
  DBMS_OUTPUT.put_line('> DB Block Buffer = ' || blkbuf || ' Blocks');
  DBMS_OUTPUT.put_line('> Log Buffer = ' || logbuf || ' Bytes');
  DBMS_OUTPUT.put_line('> ');
  IF libcac < 99 THEN
    DBMS_OUTPUT.put_line('*** HINT: Library Cache muito baixo! Aumente Shared Pool Size.');
  END IF;
  IF rowcac < 85 THEN
    DBMS_OUTPUT.put_line('*** HINT: Row Cache muito baixo! Aumente Shared Pool Size.');
  END IF;
  IF bufcac < 90 THEN
    DBMS_OUTPUT.put_line('*** HINT: Buffer Cache muito baixo! Aumente DB Block Buffer value.');
  END IF;
  IF redlog > 100 THEN
    DBMS_OUTPUT.put_line('*** HINT: Valor de Log Buffer é muito baixo!');
  END IF;
 
END;

SELECT * FROM person;

MERGE INTO CONTRATO person
    USING 
        (
            SELECT cod_person FROM person WHERE FirstName = 'Peter' AND LastName = 'Krebs'
        )
            ON (person.COD_ALUNO = cod_person);
                SELECT person.EmailAddress from EmailAddress = 26
                        Dbms_OutPut.Put_line( 'EmailAddress : ' || ' ' || EmailAddress));





SELECT person.EmailAddress from EmailAddress where 
WHERE BusinessEntityID = 
( SELECT Cod.person WHERE FirstName = 'Peter' AND LastName = 'Krebs');


SELECT person.EmailAddress from EmailAddress where 
WHERE BusinessEntityID = 
( SELECT Cod.Aluno WHERE FirstName = 'Wagner' AND LastName = 'Jesus');

select * from aluno;



